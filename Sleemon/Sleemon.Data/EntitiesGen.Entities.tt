<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Diagnostics" #>
<#@ include file="EntitiesGen.Functions.t4" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = FindEDMXFileName();
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

var hierarchyEntities = new string[] {
    @"Department"
};

// Write out support code to primary template output file
WriteHeader(fileManager);
foreach (var entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(entity.Name + ".generated.cs");
    BeginNamespace(namespaceName, code);

    var isHierarchyEntity = hierarchyEntities.Any(e => e.Equals(entity.Name, StringComparison.OrdinalIgnoreCase));
#>
using System;
using System.Collections.Generic;
using System.Data.Linq.Mapping;

<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>
<# if (isHierarchyEntity) { #>
    : HierarchyEntity
<# } else { #>
    : Entity
<# } #>
{
<#
    var propertiesWithDefaultValues = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.DefaultValue != null);
    var collectionNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    var complexProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity);

    if (propertiesWithDefaultValues.Any() || collectionNavigationProperties.Any() || complexProperties.Any())
    {
#>
    public <#=code.Escape(entity)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=code.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=code.Escape(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var primitiveProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity);
    if (primitiveProperties.Any())
    {
        foreach (var edmProperty in primitiveProperties)
        {
#>
    [Column(Name = "<#=edmProperty.Name#>", DbType = "<#=edmProperty.TypeUsage.EdmType.Name#>"<# if (ef.IsKey(edmProperty)) { #>, IsPrimaryKey = true<# } #><# if (edmProperty.Nullable == false) { #>, CanBeNull = false<# } #><# var member = entity.Members.GetValue(edmProperty.Name, false); MetadataProperty metaProperty; if (member.MetadataProperties.TryGetValue("http://schemas.microsoft.com/ado/2009/02/edm/annotation:StoreGeneratedPattern", false, out metaProperty)) { if (string.Equals(metaProperty.Value, @"Identity")) { #>, IsDbGenerated = true<# } #><# if (string.Equals(metaProperty.Value, @"Computed")) { #>, Expression = "COMPUTED"<# } } if (edmProperty.DefaultValue != null) { #>, Expression = "DEFAULT"<# } #>)]
<#
            if (isHierarchyEntity
                && edmProperty.Name.Equals(@"Level", StringComparison.OrdinalIgnoreCase))
            {
#>
    public override short Level { get { return base.Level; } set { } }
<#
            }
            else
            {
                WriteProperty(code, edmProperty, isHierarchyEntity);
            }
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var complexProperty in complexProperties)
        {
            WriteProperty(code, complexProperty, isHierarchyEntity);
        }
    }

    var navigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity);
    if (navigationProperties.Any())
    {
#>

<#
        foreach (var navigationProperty in navigationProperties)
        {
            WriteNavigationProperty(code, navigationProperty);
        }
    }
#>
}
<#
    EndNamespace(namespaceName);
}

foreach (var complex in ItemCollection.GetItems<ComplexType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(complex.Name + ".generated.cs");
    BeginNamespace(namespaceName, code);
#>
using System;

<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>
{
<#
    var complexProperties = complex.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == complex);
    var propertiesWithDefaultValues = complex.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complex && p.DefaultValue != null);

    if (propertiesWithDefaultValues.Any() || complexProperties.Any())
    {
#>
    public <#=code.Escape(complex)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=code.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=code.Escape(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var primitiveProperties = complex.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complex);
#>
<#
    if (primitiveProperties.Any())
    {
        foreach(var edmProperty in primitiveProperties)
        {
            WriteProperty(code, edmProperty, false);
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var edmProperty in complexProperties)
        {
            WriteProperty(code, edmProperty, false);
        }
    }
#>
}
<#
    EndNamespace(namespaceName);
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
string GetResourceString(string resourceName)
{
	if(_resourceManager == null)
	{
		_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
	}
	
    return _resourceManager.GetString(resourceName, null);
}
System.Resources.ResourceManager _resourceManager;

void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}


void WriteProperty(CodeGenerationTools code, EdmProperty edmProperty, bool isHierarchyEntity)
{
	bool isDateTime = !edmProperty.Nullable && edmProperty.TypeUsage.EdmType.Name == "DateTime";
	if (isDateTime) 
	{
		WriteDateTimeProperty(code, edmProperty);
		return;
	}
	bool isNullableDateTime = edmProperty.Nullable && edmProperty.TypeUsage.EdmType.Name == "DateTime";
	if (isNullableDateTime) 
	{
		WriteNullableDateTimeProperty(code, edmProperty);
		return;
	}

    WriteProperty(
        isHierarchyEntity
            ? edmProperty.Name.Equals(@"UniqueId", StringComparison.OrdinalIgnoreCase)
                ? PropertyOverrideModifier(Accessibility.ForProperty(edmProperty))
                : PropertyVirtualModifier(Accessibility.ForProperty(edmProperty))
            : Accessibility.ForProperty(edmProperty),
        code.Escape(edmProperty.TypeUsage),
        code.Escape(edmProperty),
        code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
        code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
}

void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty)
{
    var endType = code.Escape(navigationProperty.ToEndMember.GetEntityType());

    if (navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
    {
#>
    private ICollection<<#=endType#>> _<#=code.Escape(navigationProperty)#>;
    <#=PropertyVirtualModifier(Accessibility.ForProperty(navigationProperty))#> ICollection<<#=endType#>> <#=code.Escape(navigationProperty)#>
    {
        get { return this._<#=code.Escape(navigationProperty)#> ?? (this._<#=code.Escape(navigationProperty)#> = new HashSet<<#=endType#>>()); }
        set { this._<#=code.Escape(navigationProperty)#> = value; }
    }
<#+
    }
    else
    {
        WriteProperty(
            PropertyVirtualModifier(Accessibility.ForProperty(navigationProperty)),
            endType,
            code.Escape(navigationProperty),
            code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
            code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
    }
}

void WriteDateTimeProperty(CodeGenerationTools code, EdmProperty edmProperty)
{
	WritePropertyBackingField(code, edmProperty);
#>
	<#=PropertyVirtualModifier(Accessibility.ForProperty(edmProperty))#> <#=code.Escape(edmProperty.TypeUsage)#> <#=code.Escape(edmProperty)#> 
	{
		get { return <#=code.FieldName(edmProperty)#>; }
		set 
		{
			if (value.Kind == DateTimeKind.Unspecified) {
				<#=code.FieldName(edmProperty)#> = DateTime.SpecifyKind(value, DateTimeKind.Utc);
			} else {
				<#=code.FieldName(edmProperty)#> = value;
			}
		}
	}
<#+
}

void WriteNullableDateTimeProperty(CodeGenerationTools code, EdmProperty edmProperty)
{
	WritePropertyBackingField(code, edmProperty);
#>
	<#=PropertyVirtualModifier(Accessibility.ForProperty(edmProperty))#> <#=code.Escape(edmProperty.TypeUsage)#> <#=code.Escape(edmProperty)#> 
	{
		get { return <#=code.FieldName(edmProperty)#>; }
		set 
		{
			if (value != null) {
				if (value.Value.Kind == DateTimeKind.Unspecified) {
					<#=code.FieldName(edmProperty)#> = DateTime.SpecifyKind(value.Value, DateTimeKind.Utc);
				} else {
					<#=code.FieldName(edmProperty)#> = value;
				}
			} else {
				<#=code.FieldName(edmProperty)#> = value;
			}
		}
	}
<#+
}

void WriteProperty(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility)
{
#>
    <#=accessibility#> <#=type#> <#=name#> { <#=getterAccessibility#>get; <#=setterAccessibility#>set; }
<#+
}

void WritePropertyGetUsingBackingField(CodeGenerationTools code, EdmProperty edmProperty)
{
}

void WritePropertyBackingField(CodeGenerationTools code, EdmProperty edmProperty)
{
#>
	private <#=code.Escape(edmProperty.TypeUsage)#> <#=code.FieldName(edmProperty)#><#=code.StringBefore(" = ", code.CreateLiteral(edmProperty.DefaultValue)) #>;
<#+	
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

string PropertyOverrideModifier(string accessibility)
{
    return accessibility + " override";
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    var alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(var type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }

    return true;
}
#>